{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/allen/GitHub/casrep/client/src/pages/CurrentPatient.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\"; // import { Component } from \"react\"\n\nimport { Form, Container, Row, Col, Button, ListGroup, ListGroupItem } from \"react-bootstrap\";\nimport Card from \"react-bootstrap/Card\";\nimport Moment from 'react-moment';\nimport 'moment-timezone';\nimport PatientCard from \"../components/PatientCard/PatientCard\";\nimport VitalsForm from \"../components/Vitals/VitalsForm\";\nimport NewVitals from \"../components/Vitals/NewVitals\";\nimport { useParams } from \"react-router-dom\";\nimport API from \"../utils/API\";\n\nconst dayjs = require(\"dayjs\");\n\nfunction CurrentPatient() {\n  _s();\n\n  // const [entries, setEntries] = useState(1)\n  const [ptInfo, setPtInfo] = useState({});\n  const blankVitals = {\n    time: \"\",\n    HR: \"Not Reported\",\n    RR: \"Not Reported\",\n    BPs: \"Not Reported\",\n    BPd: \"Not Reported\",\n    oxygen: \"Not Reported\"\n  };\n  const [vitals, setVitals] = useState({});\n  const [criticalWarnings, setCriticalWarning] = useState({\n    status: \"set\"\n  }); // const [update, setUpdate] = useState(\"\")\n\n  const {\n    id\n  } = useParams(); // let idOnly = ({ id }.id).slice(3)\n\n  useEffect(() => {\n    // console.log(id)\n    loadById(id); // console.log(ptInfo)\n  }, []); // componentDidMount\n\n  function loadById(id) {\n    // console.log(id)\n    API.findById(id).then(ptData => {\n      setPtInfo(ptData);\n    }).then(console.log(ptInfo));\n  } // function handleInputChange(event) {\n  //     // console.log(event.target)\n  //     const { name, value } = event.target\n  //     const updateNumber = `update${entries}`\n  //     setUpdate({ [updateNumber]: value })\n  //     // setUpdate({`update${entries}`: value})\n  //     // setPtInfo({ ...ptInfo, [`update${entries}`]: value })\n  //     // console.log(ptInfo)\n  // }\n  // function handleSubmit(event) {\n  //     event.preventDefault()\n  //     // console.log(event.target.input)\n  //     // console.log(ptInfo.data._id)\n  //     API.updateById(id, update)\n  // }\n\n\n  function handleVitalsInput(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    setVitals({ ...vitals,\n      [name]: value\n    });\n  }\n\n  ;\n\n  function initVitals() {\n    // console.log(ptInfo)\n    setVitals({ ...vitals,\n      time: dayjs().format(\"HH:mm:ss\")\n    });\n  }\n\n  function handleVitalsSubmit(event) {\n    event.preventDefault();\n\n    if (vitals.HR) {\n      API.updateVitals(id, vitals).then(setVitals(blankVitals)).then(loadById(id));\n    } // .exec(loadById(id))\n    // console.log(vitals)\n    // console.log(\"here\")\n\n  }\n\n  function renderCriticalsSwitch(param) {\n    switch (criticalWarnings.status) {\n      case \"set\":\n        // return\n        break;\n\n      case \"pending\":\n        /*#__PURE__*/\n        _jsxDEV(\"p\", {\n          children: \"criticalWarnings select\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 17\n        }, this);\n\n        break;\n\n      default:\n        return;\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Row, {\n      className: \"jumbotron\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"this is the page for patient ID: \", id]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      className: \"justify-content-center\",\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n          children: [\"Critical Warnings \", /*#__PURE__*/_jsxDEV(Button, {\n            onClick: setCriticalWarning({\n              status: \"pending\"\n            }),\n            className: \"btn btn-danger\",\n            children: \"Update\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 52\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }, this), this.renderCriticalsSwitch(criticalWarnings.status), /*#__PURE__*/_jsxDEV(Card.Body, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      className: \"justify-content-center\",\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        children: ptInfo.data ? /*#__PURE__*/_jsxDEV(PatientCard, {\n          patient: ptInfo.data\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 25\n        }, this) // <Card>\n        //     <Card.Header>\n        //         Unit Responding: {ptInfo.data.respondingUnit}\n        //     </Card.Header>\n        //     <Card.Body>\n        //         <Card.Title>ETA: {ptInfo.data.ETA}</Card.Title>\n        //         <ListGroup className=\"list-group-flush\">\n        //             <ListGroupItem><b>Last Update: </b>\n        //                 <Moment tz=\"America/Denver\" format=\"HH:mm:ss MM/DD/YYYY\">\n        //                     {ptInfo.data.updatedAt}\n        //                 </Moment>\n        //             </ListGroupItem>\n        //         </ListGroup>\n        //     </Card.Body>\n        // </Card>\n        :\n        /*#__PURE__*/\n        _jsxDEV(\"h3\", {\n          children: \"Error\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 26\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n            children: \"New Vitals\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n            children: vitals.time ? /*#__PURE__*/_jsxDEV(VitalsForm, {\n              onChange: handleVitalsInput,\n              onSubmit: handleVitalsSubmit\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 33\n            }, this) : /*#__PURE__*/_jsxDEV(NewVitals, {\n              onClick: initVitals\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CurrentPatient, \"kVw3xY0l2S7HiJFo91Z5IpP+ae4=\", false, function () {\n  return [useParams];\n});\n\n_c = CurrentPatient;\nexport default CurrentPatient;\n\nvar _c;\n\n$RefreshReg$(_c, \"CurrentPatient\");","map":{"version":3,"sources":["/Users/allen/GitHub/casrep/client/src/pages/CurrentPatient.js"],"names":["React","useState","useEffect","Form","Container","Row","Col","Button","ListGroup","ListGroupItem","Card","Moment","PatientCard","VitalsForm","NewVitals","useParams","API","dayjs","require","CurrentPatient","ptInfo","setPtInfo","blankVitals","time","HR","RR","BPs","BPd","oxygen","vitals","setVitals","criticalWarnings","setCriticalWarning","status","id","loadById","findById","then","ptData","console","log","handleVitalsInput","event","name","value","target","initVitals","format","handleVitalsSubmit","preventDefault","updateVitals","renderCriticalsSwitch","param","data"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\"\n// import { Component } from \"react\"\nimport { Form, Container, Row, Col, Button, ListGroup, ListGroupItem } from \"react-bootstrap\"\nimport Card from \"react-bootstrap/Card\"\nimport Moment from 'react-moment';\nimport 'moment-timezone';\n\nimport PatientCard from \"../components/PatientCard/PatientCard\"\nimport VitalsForm from \"../components/Vitals/VitalsForm\"\nimport NewVitals from \"../components/Vitals/NewVitals\"\n\nimport { useParams } from \"react-router-dom\"\nimport API from \"../utils/API\"\n\nconst dayjs = require(\"dayjs\")\n\n\nfunction CurrentPatient() {\n    // const [entries, setEntries] = useState(1)\n\n    const [ptInfo, setPtInfo] = useState({})\n\n    const blankVitals = {\n        time: \"\",\n        HR: \"Not Reported\",\n        RR: \"Not Reported\",\n        BPs: \"Not Reported\",\n        BPd: \"Not Reported\",\n        oxygen: \"Not Reported\",\n    }\n\n    const [vitals, setVitals] = useState({})\n\n    const [criticalWarnings, setCriticalWarning] = useState({\n        status: \"set\"\n    })\n\n    // const [update, setUpdate] = useState(\"\")\n\n    const { id } = useParams()\n    // let idOnly = ({ id }.id).slice(3)\n\n    useEffect(() => {\n\n        // console.log(id)\n        loadById(id)\n        // console.log(ptInfo)\n    }, [])\n\n    // componentDidMount\n\n    function loadById(id) {\n        // console.log(id)\n        API.findById(id)\n            .then((ptData) => {\n                setPtInfo(ptData)\n            })\n            .then(\n                console.log(ptInfo)\n            )\n    }\n\n    // function handleInputChange(event) {\n    //     // console.log(event.target)\n    //     const { name, value } = event.target\n    //     const updateNumber = `update${entries}`\n    //     setUpdate({ [updateNumber]: value })\n    //     // setUpdate({`update${entries}`: value})\n    //     // setPtInfo({ ...ptInfo, [`update${entries}`]: value })\n    //     // console.log(ptInfo)\n    // }\n\n    // function handleSubmit(event) {\n    //     event.preventDefault()\n    //     // console.log(event.target.input)\n    //     // console.log(ptInfo.data._id)\n    //     API.updateById(id, update)\n    // }\n\n    function handleVitalsInput(event) {\n        const { name, value } = event.target;\n        setVitals({ ...vitals, [name]: value })\n    };\n\n    function initVitals() {\n        // console.log(ptInfo)\n        setVitals({ ...vitals, time: dayjs().format(\"HH:mm:ss\") })\n    }\n\n    function handleVitalsSubmit(event) {\n        event.preventDefault();\n        if (vitals.HR) {\n            API.updateVitals(id, vitals)\n                .then(setVitals(blankVitals))\n                .then(loadById(id))\n        }\n        // .exec(loadById(id))\n        // console.log(vitals)\n        // console.log(\"here\")\n    }\n\n    function renderCriticalsSwitch(param){\n        switch(criticalWarnings.status) {\n            case \"set\":\n                // return\n                break\n            case \"pending\":\n                <p>criticalWarnings select</p>\n                break\n            default:\n                return\n        }\n    }\n\n    return (\n        <Container>\n            <Row className=\"jumbotron\">\n                <h1>this is the page for patient ID: {id}</h1>\n\n            </Row>\n            <Row className=\"justify-content-center\">\n                <Card>\n                    <Card.Header>Critical Warnings <Button onClick={setCriticalWarning({status:\"pending\"})} className=\"btn btn-danger\">Update</Button ></Card.Header>\n                        {this.renderCriticalsSwitch(criticalWarnings.status)}\n                    <Card.Body>\n                    </Card.Body>\n                </Card>\n            </Row>\n            <Row className=\"justify-content-center\">\n                <Col>\n                    {ptInfo.data ? (\n                        <PatientCard patient={ptInfo.data} />\n                        // <Card>\n                        //     <Card.Header>\n                        //         Unit Responding: {ptInfo.data.respondingUnit}\n                        //     </Card.Header>\n                        //     <Card.Body>\n                        //         <Card.Title>ETA: {ptInfo.data.ETA}</Card.Title>\n                        //         <ListGroup className=\"list-group-flush\">\n                        //             <ListGroupItem><b>Last Update: </b>\n                        //                 <Moment tz=\"America/Denver\" format=\"HH:mm:ss MM/DD/YYYY\">\n                        //                     {ptInfo.data.updatedAt}\n                        //                 </Moment>\n                        //             </ListGroupItem>\n                        //         </ListGroup>\n                        //     </Card.Body>\n                        // </Card>\n                    ) : (<h3>Error</h3>)\n                    }\n                </Col>\n                <Col>\n                    <Card>\n                        <Card.Header>New Vitals</Card.Header>\n                        <Card.Body>\n                            {vitals.time ? (\n                                <VitalsForm onChange={handleVitalsInput} onSubmit={handleVitalsSubmit} />\n                            ) : (\n                                    <NewVitals onClick={initVitals} />\n                                )}\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n        </Container>\n    )\n}\n\nexport default CurrentPatient"]},"metadata":{},"sourceType":"module"}