{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/allen/GitHub/casrep/client/src/components/CriticalWarning/CritWarnSelect.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\"; // import { Form, Card, Button } from \"react-bootstrap\"\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport { Form } from \"react-bootstrap\";\nimport { useParams } from \"react-router-dom\";\nimport API from \"../../utils/API\";\nimport io from \"socket.io-client\";\nconst socket = io(); // import CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\n// import CheckBoxIcon from '@material-ui/icons/CheckBox';\n\nconst useStyles = makeStyles(theme => ({\n  formgroup: {\n    display: \"block\"\n  }\n}));\n\nfunction CriticalWarnSelect(props) {\n  _s();\n\n  const classes = useStyles();\n  const {\n    id\n  } = useParams();\n  const [checked, setChecked] = useState({\n    CPR: false,\n    stroke: false,\n    trauma1: false,\n    trauma2: false,\n    intubated: false,\n    fallWithThinners: false\n  }); // const allFalse = {\n  //     CPR: false,\n  //     stroke: false,\n  //     trauma1: false,\n  //     trauma2: false,\n  //     intubated: false,\n  //     fallWithThinners: false\n  // }\n\n  const handleChange = event => {\n    setChecked({ ...checked,\n      [event.target.name]: event.target.checked\n    }); // console.log(checked)\n  };\n\n  function handleCriticalsSubmit(event, data) {\n    event.preventDefault(); // findForm(event.target)\n    // console.log(event.target.parentElement.parentElement.parentElement)\n    // console.log(data)\n    // setCriticalWarning({ ...criticalWarnings, pending: false })\n    // // console.log(criticalWarnings)\n    // // const warningsString = JSON.stringify(criticalWarnings)\n    // // console.log(warningsString)\n\n    API.updateCriticalWarnings(id, data) // .then(setCriticalWarning(data))\n    // .then(setCriticalWarning({...criticalWarnings}))\n    // .then(event.target.parentElement.parentElement.reset())\n    // .then(clearForm(event.target))\n    .then(socket.emit(\"update\")); // .then(event.target.parentElement.parentElement.reset())\n    // .then(loadById(id))\n  } // function clearCheckBoxes() {\n  //     setChecked(allFalse)\n  // }\n\n\n  return (\n    /*#__PURE__*/\n    // <FormGroup row>\n    //     <Grid container className={classes.formgroup}>\n    //         <form>\n    //             <Grid item xs={12}>\n    _jsxDEV(\"div\", {\n      className: classes.root,\n      children: /*#__PURE__*/_jsxDEV(FormControl, {\n        component: \"fieldset\",\n        className: classes.formControl,\n        children: /*#__PURE__*/_jsxDEV(FormGroup, {\n          children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n            control: /*#__PURE__*/_jsxDEV(Checkbox, {\n              checked: checked.CPR,\n              onChange: handleChange,\n              name: \"CPR\",\n              color: \"primary\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 33\n            }, this),\n            label: \"CPR IN PROGRESS\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n            control: /*#__PURE__*/_jsxDEV(Checkbox, {\n              checked: checked.stroke,\n              onChange: handleChange,\n              name: \"stroke\",\n              color: \"secondary\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 33\n            }, this),\n            label: \"STROKE ALERT\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n            control: /*#__PURE__*/_jsxDEV(Checkbox, {\n              checked: checked.trauma1,\n              onChange: handleChange,\n              name: \"trauma1\",\n              color: \"secondary\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 33\n            }, this),\n            label: \"Trauma Level 1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n            control: /*#__PURE__*/_jsxDEV(Checkbox, {\n              checked: checked.trauma2,\n              onChange: handleChange,\n              name: \"trauma2\",\n              color: \"secondary\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 33\n            }, this),\n            label: \"Trauma Level 2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n            control: /*#__PURE__*/_jsxDEV(Checkbox, {\n              checked: checked.intubated,\n              onChange: handleChange,\n              name: \"intubated\",\n              color: \"secondary\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 33\n            }, this),\n            label: \"Patient Intubated\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n            control: /*#__PURE__*/_jsxDEV(Checkbox, {\n              checked: checked.fallWithThinners,\n              onChange: handleChange,\n              name: \"fallWithThinners\",\n              color: \"secondary\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 33\n            }, this),\n            label: \"Fall With Blood Thinners\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            size: \"large\",\n            variant: \"contained\",\n            color: \"primary\",\n            onClick: event => handleCriticalsSubmit(event, checked),\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this) //         </form>\n    //     </Grid>\n    // </FormGroup>\n\n  ); // return (\n  //     <FormGroup row>\n  //         <Grid container className={classes.formgroup}>\n  //             <form>\n  //                 <Grid item xs={12}>\n  //                     <FormControlLabel\n  //                         control={\n  //                             <Checkbox\n  //                                 checked={checked.CPR}\n  //                                 onChange={handleChange}\n  //                                 name=\"CPR\"\n  //                                 color=\"secondary\"\n  //                             />\n  //                         }\n  //                         label=\"CPR IN PROGRESS\"\n  //                     />\n  //                     <FormControlLabel\n  //                         control={\n  //                             <Checkbox\n  //                                 checked={checked.stroke}\n  //                                 onChange={handleChange}\n  //                                 name=\"stroke\"\n  //                                 color=\"secondary\"\n  //                             />\n  //                         }\n  //                         label=\"STROKE ALERT\"\n  //                     />\n  //                 </Grid>\n  //                 <Grid item xs={12}>\n  //                     <FormControlLabel\n  //                         control={\n  //                             <Checkbox\n  //                                 checked={checked.trauma1}\n  //                                 onChange={handleChange}\n  //                                 name=\"trauma1\"\n  //                                 color=\"secondary\"\n  //                             />\n  //                         }\n  //                         label=\"Trauma Level 1\"\n  //                     />\n  //                     <FormControlLabel\n  //                         control={\n  //                             <Checkbox\n  //                                 checked={checked.trauma2}\n  //                                 onChange={handleChange}\n  //                                 name=\"trauma2\"\n  //                                 color=\"secondary\"\n  //                             />\n  //                         }\n  //                         label=\"Trauma Level 2\"\n  //                     />\n  //                 </Grid>\n  //                 <Grid item xs={12}>\n  //                     <FormControlLabel\n  //                         control={\n  //                             <Checkbox\n  //                                 checked={checked.intubated}\n  //                                 onChange={handleChange}\n  //                                 name=\"intubated\"\n  //                                 color=\"secondary\"\n  //                             />\n  //                         }\n  //                         label=\"Patient Intubated\"\n  //                     />\n  //                     <FormControlLabel\n  //                         control={\n  //                             <Checkbox\n  //                                 checked={checked.fallWithThinners}\n  //                                 onChange={handleChange}\n  //                                 name=\"fallWithThinners\"\n  //                                 color=\"secondary\"\n  //                             />\n  //                         }\n  //                         label=\"Fall With Blood Thinners\"\n  //                     />\n  //                 </Grid>\n  //                 <Button size=\"large\" variant=\"contained\" color=\"primary\" onClick={(event) => handleSubmit(event, checked)}>Submit</Button>\n  //             </form>\n  //         </Grid>\n  //     </FormGroup>\n  // )\n}\n\n_s(CriticalWarnSelect, \"G6llBiERR4+vOmpN6SgqNYnpyxo=\", false, function () {\n  return [useStyles, useParams];\n});\n\n_c = CriticalWarnSelect;\nexport default CriticalWarnSelect;\n\nvar _c;\n\n$RefreshReg$(_c, \"CriticalWarnSelect\");","map":{"version":3,"sources":["/Users/allen/GitHub/casrep/client/src/components/CriticalWarning/CritWarnSelect.js"],"names":["React","useState","makeStyles","FormGroup","FormControl","FormControlLabel","Checkbox","Button","Grid","Form","useParams","API","io","socket","useStyles","theme","formgroup","display","CriticalWarnSelect","props","classes","id","checked","setChecked","CPR","stroke","trauma1","trauma2","intubated","fallWithThinners","handleChange","event","target","name","handleCriticalsSubmit","data","preventDefault","updateCriticalWarnings","then","emit","root","formControl"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\"\n// import { Form, Card, Button } from \"react-bootstrap\"\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport FormGroup from '@material-ui/core/FormGroup'\nimport FormControl from '@material-ui/core/FormControl'\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Button from '@material-ui/core/Button'\nimport Grid from '@material-ui/core/Grid'\nimport { Form } from \"react-bootstrap\";\n\nimport { useParams } from \"react-router-dom\"\nimport API from \"../../utils/API\"\n\nimport io from \"socket.io-client\"\nconst socket = io()\n// import CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\n// import CheckBoxIcon from '@material-ui/icons/CheckBox';\n\nconst useStyles = makeStyles((theme) => ({\n    formgroup: {\n        display: \"block\"\n    },\n}));\n\nfunction CriticalWarnSelect(props) {\n    const classes = useStyles();\n    const { id } = useParams()\n\n    const [checked, setChecked] = useState({\n        CPR: false,\n        stroke: false,\n        trauma1: false,\n        trauma2: false,\n        intubated: false,\n        fallWithThinners: false\n    })\n\n    // const allFalse = {\n    //     CPR: false,\n    //     stroke: false,\n    //     trauma1: false,\n    //     trauma2: false,\n    //     intubated: false,\n    //     fallWithThinners: false\n    // }\n\n    const handleChange = (event) => {\n        setChecked({ ...checked, [event.target.name]: event.target.checked });\n        // console.log(checked)\n    };\n\n    function handleCriticalsSubmit(event, data) {\n        event.preventDefault();\n        // findForm(event.target)\n        // console.log(event.target.parentElement.parentElement.parentElement)\n        // console.log(data)\n        // setCriticalWarning({ ...criticalWarnings, pending: false })\n        // // console.log(criticalWarnings)\n        // // const warningsString = JSON.stringify(criticalWarnings)\n        // // console.log(warningsString)\n\n        API.updateCriticalWarnings(id, data)\n            // .then(setCriticalWarning(data))\n            // .then(setCriticalWarning({...criticalWarnings}))\n            // .then(event.target.parentElement.parentElement.reset())\n            // .then(clearForm(event.target))\n            .then(socket.emit(\"update\"))\n        // .then(event.target.parentElement.parentElement.reset())\n        // .then(loadById(id))\n    }\n\n    // function clearCheckBoxes() {\n    //     setChecked(allFalse)\n    // }\n    return (\n        // <FormGroup row>\n        //     <Grid container className={classes.formgroup}>\n        //         <form>\n        //             <Grid item xs={12}>\n        <div className={classes.root}>\n            <FormControl component=\"fieldset\" className={classes.formControl}>\n                <FormGroup>\n                <FormControlLabel\n                            control={\n                                <Checkbox\n                                    checked={checked.CPR}\n                                    onChange={handleChange}\n                                    name=\"CPR\"\n                                    color=\"primary\"\n                                />\n                            }\n                            label=\"CPR IN PROGRESS\"\n                        />\n                        <FormControlLabel\n                            control={\n                                <Checkbox\n                                    checked={checked.stroke}\n                                    onChange={handleChange}\n                                    name=\"stroke\"\n                                    color=\"secondary\"\n                                />\n                            }\n                            label=\"STROKE ALERT\"\n                        />\n                        <FormControlLabel\n                            control={\n                                <Checkbox\n                                    checked={checked.trauma1}\n                                    onChange={handleChange}\n                                    name=\"trauma1\"\n                                    color=\"secondary\"\n                                />\n                            }\n                            label=\"Trauma Level 1\"\n                        />\n                        <FormControlLabel\n                            control={\n                                <Checkbox\n                                    checked={checked.trauma2}\n                                    onChange={handleChange}\n                                    name=\"trauma2\"\n                                    color=\"secondary\"\n                                />\n                            }\n                            label=\"Trauma Level 2\"\n                        />\n                        <FormControlLabel\n                            control={\n                                <Checkbox\n                                    checked={checked.intubated}\n                                    onChange={handleChange}\n                                    name=\"intubated\"\n                                    color=\"secondary\"\n                                />\n                            }\n                            label=\"Patient Intubated\"\n                        />\n                        <FormControlLabel\n                            control={\n                                <Checkbox\n                                    checked={checked.fallWithThinners}\n                                    onChange={handleChange}\n                                    name=\"fallWithThinners\"\n                                    color=\"secondary\"\n                                />\n                            }\n                            label=\"Fall With Blood Thinners\"\n                        />\n                    <Button size=\"large\" variant=\"contained\" color=\"primary\" onClick={(event) => handleCriticalsSubmit(event, checked)}>Submit</Button>\n                </FormGroup>\n            </FormControl>\n        </div>\n                        \n        //         </form>\n        //     </Grid>\n        // </FormGroup>\n    )\n    // return (\n    //     <FormGroup row>\n    //         <Grid container className={classes.formgroup}>\n    //             <form>\n    //                 <Grid item xs={12}>\n    //                     <FormControlLabel\n    //                         control={\n    //                             <Checkbox\n    //                                 checked={checked.CPR}\n    //                                 onChange={handleChange}\n    //                                 name=\"CPR\"\n    //                                 color=\"secondary\"\n    //                             />\n    //                         }\n    //                         label=\"CPR IN PROGRESS\"\n    //                     />\n    //                     <FormControlLabel\n    //                         control={\n    //                             <Checkbox\n    //                                 checked={checked.stroke}\n    //                                 onChange={handleChange}\n    //                                 name=\"stroke\"\n    //                                 color=\"secondary\"\n    //                             />\n    //                         }\n    //                         label=\"STROKE ALERT\"\n    //                     />\n    //                 </Grid>\n    //                 <Grid item xs={12}>\n    //                     <FormControlLabel\n    //                         control={\n    //                             <Checkbox\n    //                                 checked={checked.trauma1}\n    //                                 onChange={handleChange}\n    //                                 name=\"trauma1\"\n    //                                 color=\"secondary\"\n    //                             />\n    //                         }\n    //                         label=\"Trauma Level 1\"\n    //                     />\n    //                     <FormControlLabel\n    //                         control={\n    //                             <Checkbox\n    //                                 checked={checked.trauma2}\n    //                                 onChange={handleChange}\n    //                                 name=\"trauma2\"\n    //                                 color=\"secondary\"\n    //                             />\n    //                         }\n    //                         label=\"Trauma Level 2\"\n    //                     />\n    //                 </Grid>\n    //                 <Grid item xs={12}>\n    //                     <FormControlLabel\n    //                         control={\n    //                             <Checkbox\n    //                                 checked={checked.intubated}\n    //                                 onChange={handleChange}\n    //                                 name=\"intubated\"\n    //                                 color=\"secondary\"\n    //                             />\n    //                         }\n    //                         label=\"Patient Intubated\"\n    //                     />\n    //                     <FormControlLabel\n    //                         control={\n    //                             <Checkbox\n    //                                 checked={checked.fallWithThinners}\n    //                                 onChange={handleChange}\n    //                                 name=\"fallWithThinners\"\n    //                                 color=\"secondary\"\n    //                             />\n    //                         }\n    //                         label=\"Fall With Blood Thinners\"\n    //                     />\n    //                 </Grid>\n    //                 <Button size=\"large\" variant=\"contained\" color=\"primary\" onClick={(event) => handleSubmit(event, checked)}>Submit</Button>\n    //             </form>\n    //         </Grid>\n    //     </FormGroup>\n    // )\n}\n\nexport default CriticalWarnSelect"]},"metadata":{},"sourceType":"module"}