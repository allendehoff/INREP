{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/allen/GitHub/casrep/client/src/components/PatientCard/PatientCard.js\";\nimport React from \"react\";\nimport { Card, Accordion, Row, Col } from \"react-bootstrap\"; // import Moment from 'react-moment';\n// import 'moment-timezone';\n\nimport VitalsTable from \"../Vitals/VitalsTable\";\nimport PatientInformationTable from \"../PatientInformation/PatientInformationTable\";\nimport \"./ptCardStyle.css\";\n\nfunction PatientCard(props) {\n  // useEffect(() => {\n  // }, [])\n  let warningKeys = [];\n\n  function fetchTrueWarnings(obj) {\n    // await loadById(id)\n    for (const property in obj) {\n      if (obj[property] === true) {\n        warningKeys.push(property);\n      } // return warningKeys\n\n    } // console.log(warningKeys)\n\n  } // console.log(props.patient.criticalWarn)\n\n\n  if (props.patient.criticalWarn !== undefined) {\n    fetchTrueWarnings(JSON.parse(props.patient.criticalWarn));\n  } // const patientInfoObject = JSON.parse(props.patient.patientInformation)\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            fontSize: \"1.5rem\"\n          },\n          children: [\"ETA: \", /*#__PURE__*/_jsxDEV(\"span\", {\n            children: props.patient.ETA\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 60\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            fontSize: \"1.25rem\"\n          },\n          children: [\"Unit Responding: \", /*#__PURE__*/_jsxDEV(\"span\", {\n            children: props.patient.respondingUnit\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 73\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Critical Warnings: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        children: warningKeys.map(warning => {\n          if (warning !== \"pending\") {\n            return /*#__PURE__*/_jsxDEV(\"p\", {\n              style: {\n                backgroundColor: \"red\",\n                color: \"white\",\n                borderRadius: \"2px\",\n                padding: \"0.5rem\"\n              },\n              children: warning\n            }, warning, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 36\n            }, this);\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this) //     <Card style={{ marginBottom: \"1rem\", paddingBottom: \"1rem\", minWidth: \"80%\" }}>\n  //         <Card.Header>\n  //             Unit Responding: {props.patient.respondingUnit} |\n  //         ETA: {props.patient.ETA}\n  //         </Card.Header>\n  //         <Card.Body>\n  //             <Card.Title>Critical Warnings:\n  //             <div style={{ display: \"flex\", justifyContent: \"space-around\", paddingTop: \"1rem\" }}>\n  //                     {warningKeys.map(warning => {\n  //                         if (warning !== \"pending\") {\n  //                             return <p key={warning} style={{ backgroundColor: \"red\", color: \"white\", borderRadius: \"2px\", padding: \"0.5rem\" }}>{warning}</p>\n  //                         }\n  //                     }\n  //                     )}\n  //                 </div>\n  //             </Card.Title>\n  //             {/* <Card.Text>ETA: {props.patient.ETA}</Card.Text> */}\n  //             <Accordion defaultActiveKey=\"0\">\n  //                 <Accordion.Toggle eventKey=\"vitals\" className=\"accordionButton\"><span className=\"accBtnSpan\">Vitals <span>&gt;</span></span></Accordion.Toggle>\n  //                 <Accordion.Collapse eventKey=\"vitals\">\n  //                     <VitalsTable patient={props.patient} />\n  //                 </Accordion.Collapse>\n  //                 {/* </Card> */}\n  //             </Accordion>\n  //             <Accordion defaultActiveKey=\"0\">\n  //                 <Accordion.Toggle eventKey=\"patientInformation\" className=\"accordionButton\">\n  //                     <span className=\"accBtnSpan\">Patient Information <span>&gt;</span></span>\n  //                 </Accordion.Toggle>\n  //                 <Accordion.Collapse eventKey=\"patientInformation\">\n  //                     <PatientInformationTable patientObj={props.patient.patientInformation} />\n  //                 </Accordion.Collapse>\n  //             </Accordion>\n  //         </Card.Body>\n  //     </Card>\n  // </div>\n  ;\n}\n\n_c = PatientCard;\nexport default PatientCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"PatientCard\");","map":{"version":3,"sources":["/Users/allen/GitHub/casrep/client/src/components/PatientCard/PatientCard.js"],"names":["React","Card","Accordion","Row","Col","VitalsTable","PatientInformationTable","PatientCard","props","warningKeys","fetchTrueWarnings","obj","property","push","patient","criticalWarn","undefined","JSON","parse","fontSize","ETA","respondingUnit","map","warning","backgroundColor","color","borderRadius","padding"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,SAAf,EAA0BC,GAA1B,EAA+BC,GAA/B,QAA0C,iBAA1C,C,CACA;AACA;;AAEA,OAAOC,WAAP,MAAwB,uBAAxB;AACA,OAAOC,uBAAP,MAAoC,+CAApC;AAEA,OAAO,mBAAP;;AAEA,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AACxB;AAEA;AAEA,MAAIC,WAAW,GAAG,EAAlB;;AACA,WAASC,iBAAT,CAA2BC,GAA3B,EAAgC;AAC5B;AACA,SAAK,MAAMC,QAAX,IAAuBD,GAAvB,EAA4B;AACxB,UAAIA,GAAG,CAACC,QAAD,CAAH,KAAkB,IAAtB,EAA4B;AACxBH,QAAAA,WAAW,CAACI,IAAZ,CAAiBD,QAAjB;AACH,OAHuB,CAIxB;;AACH,KAP2B,CAQ5B;;AACH,GAfuB,CAgBxB;;;AACA,MAAIJ,KAAK,CAACM,OAAN,CAAcC,YAAd,KAA+BC,SAAnC,EAA8C;AAC1CN,IAAAA,iBAAiB,CAACO,IAAI,CAACC,KAAL,CAAWV,KAAK,CAACM,OAAN,CAAcC,YAAzB,CAAD,CAAjB;AACH,GAnBuB,CAqBxB;;;AAEA,sBACI;AAAA,4BACI,QAAC,GAAD;AAAA,8BACI,QAAC,GAAD;AAAA,+BACI;AAAG,UAAA,KAAK,EAAE;AAAEI,YAAAA,QAAQ,EAAE;AAAZ,WAAV;AAAA,2CAAuC;AAAA,sBAAOX,KAAK,CAACM,OAAN,CAAcM;AAArB;AAAA;AAAA;AAAA;AAAA,kBAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ,eAII,QAAC,GAAD;AAAA,+BACI;AAAG,UAAA,KAAK,EAAE;AAAED,YAAAA,QAAQ,EAAE;AAAZ,WAAV;AAAA,uDAAoD;AAAA,sBAAOX,KAAK,CAACM,OAAN,CAAcO;AAArB;AAAA;AAAA;AAAA;AAAA,kBAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eASI,QAAC,GAAD;AAAA,8BACI,QAAC,GAAD;AAAA,+BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ,eAII,QAAC,GAAD;AAAA,kBAEKZ,WAAW,CAACa,GAAZ,CAAgBC,OAAO,IAAI;AACxB,cAAIA,OAAO,KAAK,SAAhB,EAA2B;AACvB,gCAAO;AAAiB,cAAA,KAAK,EAAE;AAAEC,gBAAAA,eAAe,EAAE,KAAnB;AAA0BC,gBAAAA,KAAK,EAAE,OAAjC;AAA0CC,gBAAAA,YAAY,EAAE,KAAxD;AAA+DC,gBAAAA,OAAO,EAAE;AAAxE,eAAxB;AAAA,wBAA6GJ;AAA7G,eAAQA,OAAR;AAAA;AAAA;AAAA;AAAA,oBAAP;AACH;AACJ,SAJA;AAFL;AAAA;AAAA;AAAA;AAAA,cAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,YATJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,CA6BI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA/DJ;AAiEH;;KAxFQhB,W;AA0FT,eAAeA,WAAf","sourcesContent":["import React from \"react\";\nimport { Card, Accordion, Row, Col } from \"react-bootstrap\"\n// import Moment from 'react-moment';\n// import 'moment-timezone';\n\nimport VitalsTable from \"../Vitals/VitalsTable\"\nimport PatientInformationTable from \"../PatientInformation/PatientInformationTable\"\n\nimport \"./ptCardStyle.css\"\n\nfunction PatientCard(props) {\n    // useEffect(() => {\n\n    // }, [])\n\n    let warningKeys = []\n    function fetchTrueWarnings(obj) {\n        // await loadById(id)\n        for (const property in obj) {\n            if (obj[property] === true) {\n                warningKeys.push(property)\n            }\n            // return warningKeys\n        }\n        // console.log(warningKeys)\n    }\n    // console.log(props.patient.criticalWarn)\n    if (props.patient.criticalWarn !== undefined) {\n        fetchTrueWarnings(JSON.parse(props.patient.criticalWarn))\n    }\n\n    // const patientInfoObject = JSON.parse(props.patient.patientInformation)\n\n    return (\n        <div>\n            <Row>\n                <Col>\n                    <p style={{ fontSize: \"1.5rem\" }}>ETA: <span>{props.patient.ETA}</span></p>\n                </Col>\n                <Col>\n                    <p style={{ fontSize: \"1.25rem\" }}>Unit Responding: <span>{props.patient.respondingUnit}</span></p>\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    <p>Critical Warnings: </p>\n                </Col>\n                <Col>\n                    {/* <div style={{ display: \"flex\", justifyContent: \"space-around\", paddingTop: \"1rem\" }}> */}\n                    {warningKeys.map(warning => {\n                        if (warning !== \"pending\") {\n                            return <p key={warning} style={{ backgroundColor: \"red\", color: \"white\", borderRadius: \"2px\", padding: \"0.5rem\" }}>{warning}</p>\n                        }\n                    }\n                    )}\n                    {/* </div> */}\n                </Col>\n            </Row>\n\n        </div>\n\n\n        //     <Card style={{ marginBottom: \"1rem\", paddingBottom: \"1rem\", minWidth: \"80%\" }}>\n        //         <Card.Header>\n        //             Unit Responding: {props.patient.respondingUnit} |\n        //         ETA: {props.patient.ETA}\n        //         </Card.Header>\n        //         <Card.Body>\n        //             <Card.Title>Critical Warnings:\n        //             <div style={{ display: \"flex\", justifyContent: \"space-around\", paddingTop: \"1rem\" }}>\n        //                     {warningKeys.map(warning => {\n        //                         if (warning !== \"pending\") {\n        //                             return <p key={warning} style={{ backgroundColor: \"red\", color: \"white\", borderRadius: \"2px\", padding: \"0.5rem\" }}>{warning}</p>\n        //                         }\n        //                     }\n        //                     )}\n        //                 </div>\n        //             </Card.Title>\n        //             {/* <Card.Text>ETA: {props.patient.ETA}</Card.Text> */}\n        //             <Accordion defaultActiveKey=\"0\">\n        //                 <Accordion.Toggle eventKey=\"vitals\" className=\"accordionButton\"><span className=\"accBtnSpan\">Vitals <span>&gt;</span></span></Accordion.Toggle>\n        //                 <Accordion.Collapse eventKey=\"vitals\">\n        //                     <VitalsTable patient={props.patient} />\n        //                 </Accordion.Collapse>\n        //                 {/* </Card> */}\n        //             </Accordion>\n        //             <Accordion defaultActiveKey=\"0\">\n        //                 <Accordion.Toggle eventKey=\"patientInformation\" className=\"accordionButton\">\n        //                     <span className=\"accBtnSpan\">Patient Information <span>&gt;</span></span>\n        //                 </Accordion.Toggle>\n        //                 <Accordion.Collapse eventKey=\"patientInformation\">\n        //                     <PatientInformationTable patientObj={props.patient.patientInformation} />\n        //                 </Accordion.Collapse>\n        //             </Accordion>\n        //         </Card.Body>\n        //     </Card>\n        // </div>\n    )\n}\n\nexport default PatientCard"]},"metadata":{},"sourceType":"module"}