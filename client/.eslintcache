[{"/Users/allen/GitHub/casrep/client/src/index.js":"1","/Users/allen/GitHub/casrep/client/src/App.js":"2","/Users/allen/GitHub/casrep/client/src/reportWebVitals.js":"3","/Users/allen/GitHub/casrep/client/src/components/Login/Login.js":"4","/Users/allen/GitHub/casrep/client/src/pages/Signup.js":"5","/Users/allen/GitHub/casrep/client/src/utils/API.js":"6","/Users/allen/GitHub/casrep/client/src/pages/Home.js":"7","/Users/allen/GitHub/casrep/client/src/pages/Hospital.js":"8","/Users/allen/GitHub/casrep/client/src/pages/EMS.js":"9","/Users/allen/GitHub/casrep/client/src/components/NewPatient/NewPatient.js":"10","/Users/allen/GitHub/casrep/client/src/components/PreviousPatients/PreviousPatients.js":"11","/Users/allen/GitHub/casrep/client/src/components/NewPatient/PtInitForm.js":"12","/Users/allen/GitHub/casrep/client/src/pages/CurrentPatient.js":"13","/Users/allen/GitHub/casrep/client/src/components/Vitals/VitalsForm.js":"14","/Users/allen/GitHub/casrep/client/src/components/PatientCard/PatientCard.js":"15","/Users/allen/GitHub/casrep/client/src/components/Vitals/VitalsTable.js":"16","/Users/allen/GitHub/casrep/client/src/components/CriticalWarning/CritWarnSelect.js":"17","/Users/allen/GitHub/casrep/client/src/components/Navbar/Navbar.js":"18","/Users/allen/GitHub/casrep/client/src/components/EtaUpdate/EtaUpdate.js":"19","/Users/allen/GitHub/casrep/client/src/components/PatientInformation/PatientInformationForm.js":"20","/Users/allen/GitHub/casrep/client/src/components/PatientInformation/PatientInformationTable.js":"21","/Users/allen/GitHub/casrep/client/src/components/HomeButtonBase/HomeButtonBase.js":"22","/Users/allen/GitHub/casrep/client/src/components/EMSToolbar/EMSToolbar.js":"23","/Users/allen/GitHub/casrep/client/src/components/EMSPatientCard/EMSPatientCard.js":"24","/Users/allen/GitHub/casrep/client/src/components/Loading/Loading.js":"25"},{"size":697,"mtime":1608071759065,"results":"26","hashOfConfig":"27"},{"size":1868,"mtime":1608593241859,"results":"28","hashOfConfig":"27"},{"size":362,"mtime":1606871342580,"results":"29","hashOfConfig":"27"},{"size":2226,"mtime":1606954155256,"results":"30","hashOfConfig":"27"},{"size":3732,"mtime":1606932760261,"results":"31","hashOfConfig":"27"},{"size":1468,"mtime":1608236185199,"results":"32","hashOfConfig":"27"},{"size":4977,"mtime":1608594066528,"results":"33","hashOfConfig":"27"},{"size":4778,"mtime":1608655543812,"results":"34","hashOfConfig":"27"},{"size":3930,"mtime":1608595210997,"results":"35","hashOfConfig":"27"},{"size":2964,"mtime":1608594584817,"results":"36","hashOfConfig":"27"},{"size":656,"mtime":1607052572852,"results":"37","hashOfConfig":"27"},{"size":4820,"mtime":1608595913539,"results":"38","hashOfConfig":"27"},{"size":14241,"mtime":1608655402461,"results":"39","hashOfConfig":"27"},{"size":8230,"mtime":1608495435158,"results":"40","hashOfConfig":"27"},{"size":16587,"mtime":1608657239550,"results":"41","hashOfConfig":"27"},{"size":2855,"mtime":1608428579733,"results":"42","hashOfConfig":"27"},{"size":9853,"mtime":1608568197124,"results":"43","hashOfConfig":"27"},{"size":2262,"mtime":1608407012938,"results":"44","hashOfConfig":"27"},{"size":3803,"mtime":1608495554663,"results":"45","hashOfConfig":"27"},{"size":7382,"mtime":1608495711050,"results":"46","hashOfConfig":"27"},{"size":2841,"mtime":1608407298797,"results":"47","hashOfConfig":"27"},{"size":3889,"mtime":1608321932831,"results":"48","hashOfConfig":"27"},{"size":5515,"mtime":1608595662498,"results":"49","hashOfConfig":"27"},{"size":11317,"mtime":1608657324752,"results":"50","hashOfConfig":"27"},{"size":1177,"mtime":1608655351457,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"12pzw6t",{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"54"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"54"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"54"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"54"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"54"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"54"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"54"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/allen/GitHub/casrep/client/src/index.js",[],["112","113"],"/Users/allen/GitHub/casrep/client/src/App.js",["114"],"// import logo from './logo.svg';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n// import Login from \"./components/Login/Login\"\n// import Signup from \"./pages/Signup\"\nimport Navigation from \"./components/Navbar/Navbar\"\nimport Home from \"./pages/Home\"\nimport EMS from \"./pages/EMS\"\nimport Hospital from \"./pages/Hospital\"\nimport NewPatient from './components/NewPatient/NewPatient';\nimport CurrentPatient from \"./pages/CurrentPatient\"\n\nfunction App() {\n  return (\n    <div\n      style={{\n        backgroundColor: \"#003249\",\n        minHeight: \"100vh\"\n      }}\n    >\n      <Router>\n        <Navigation />\n          <Switch>\n            <Route exact path={\"/\"}>\n              <Home />\n            </Route>\n            <Route exact path={\"/ems\"}>\n              <EMS />\n            </Route>\n            <Route path={\"/new\"}>\n              <NewPatient />\n            </Route>\n            <Route exact path={\"/hospital\"}>\n              <Hospital />\n            </Route>\n            <Route exact path={\"/patients/:id\"}>\n              <CurrentPatient />\n            </Route>\n            {/* <Route exact path={[\"/\", \"/login\"]}>\n          <Login />\n        </Route>\n        <Route path=\"/signup\">\n          <Signup />\n        </Route> */}\n          </Switch>\n        {/* </Navigation> */}\n      </Router>\n    // </div>\n\n    // <div className=\"App\">\n    //   <header className=\"App-header\">\n    //     <img src={logo} className=\"App-logo\" alt=\"logo\" />\n    //     <p>\n    //       This is CASREP for EMS/ hospital comunication in rural areas.\n    //     </p>\n    //     <a\n    //       className=\"App-link\"\n    //       href=\"https://reactjs.org\"\n    //       target=\"_blank\"\n    //       rel=\"noopener noreferrer\"\n    //     >\n    //       Learn React\n    //     </a>\n    //   </header>\n    // </div>\n  );\n}\n\nexport default App;\n","/Users/allen/GitHub/casrep/client/src/reportWebVitals.js",[],"/Users/allen/GitHub/casrep/client/src/components/Login/Login.js",[],["115","116"],"/Users/allen/GitHub/casrep/client/src/pages/Signup.js",[],"/Users/allen/GitHub/casrep/client/src/utils/API.js",["117"],"import axios from \"axios\"\n\nexport default {\n    // createUser: function(userData) {\n    //     return axios.post(\"/api/user/signup\", userData)\n    // },\n\n    // findUser: function(loginCredentials) {\n    //     // console.log(loginCredentials)\n    //     return axios.get(\"/api/user/login\", loginCredentials)\n    // },\n\n    createPatient: function (PtInitInfo) {\n        // if (navigator.onLine) {\n            return axios.post(\"/api/patients/new\", PtInitInfo)\n        // } else {console.log(\"offline here\")}\n    },\n\n    findById: function(id) {\n        // console.log(id)\n        // let idString = id.toString()\n        return axios.get(\"/api/patients/\" + id)\n        // return axios.get(\"/api/patients/id\", {params: {id}})\n    },\n\n    updateETA: function (id, time) {\n        return axios.put(\"/api/patients/eta/\" + id, time)\n    },\n\n    updateVitals: function(id, vitals) {\n        // console.log(\"here\")\n        return axios.put(\"/api/patients/vitals/\"+ id, vitals)\n    },\n\n    updateCriticalWarnings: function(id, criticals) {\n        // console.log(\"here\")\n        return axios.put(\"/api/patients/criticals/\"+ id, criticals)\n    },\n    \n    updatePtInformation: function (id, information) {\n        return axios.put(\"/api/patients/information/\" +id, information)\n    },\n\n    findSix: function () {\n        return axios.get(\"/api/patients\")\n    }\n\n    // findMostRecentPatient: function () {\n    //     return axios.get(\"/api/patients/recent\")\n        \n    // }\n}","/Users/allen/GitHub/casrep/client/src/pages/Home.js",["118"],"// import React from \"react\"\n// import { Card, Row, Col, Button, } from \"react-bootstrap\"\nimport \"./style.css\"\n\nimport React from 'react';\n// import CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport HomeButtonBases from \"../components/HomeButtonBase/HomeButtonBase\"\n\n\n\n\n// import ambulance from \"../assets/images/ambulance.jpg\"\n// import hospital from \"../assets/images/hospital.jpg\"\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow:1\n    },\n    header: {\n        padding: \"2rem 0 4rem 0\",\n        textAlign:\"center\",\n        // borderBottom:\"5px solid #FFD400\",\n        marginBottom: \"3rem\"\n    },\n    subheader: {\n        textAlign:\"center\",\n        paddingBottom:\"3rem\"\n    }\n}))\n\nfunction Home() {\n    const classes=useStyles()\n    return (\n        <div className={classes.root}>\n        <Container>\n            <Grid container>\n                <Grid item xs={12} className={classes.header}>\n                    <Typography variant=\"h2\"\n                    className=\"heading\"\n                    //  style={{ color: \"#FFD400\" }}\n                     >Welcome to INREP</Typography>\n                    <Typography variant=\"h4\"\n                    className=\"subheading\"\n                    // style={{ color: \"#B7D5D4\" }}\n                    >A tool to help EMS providers reliably send reports to Hospitals without worrying about radio signal or cell service</Typography>\n                </Grid>\n                <Grid item xs={12} className={classes.subheader}>\n                    <Typography variant=\"h5\" \n                    className=\"subSubheading\"\n                    // style={{color:\"white\"}}\n                    >To begin, select what type of user you are:</Typography>\n                </Grid>\n                <Grid item xs={12}>\n                    <HomeButtonBases style={{width:\"80%\"}} />\n                </Grid>\n            </Grid>\n        </Container>\n        </div>\n\n        // <div className=\"container\" >\n        /* <div\n            style={{ disply: \"flex\", textAlign: \"center\", padding: \"1rem 0 2rem 0\", borderBottom: \"5px solid #FFD400\", marginBottom: \"3rem\" }}\n        // className=\"jumbotron\" \n        >\n            <h1 style={{ color: \"#FFD400\" }}>Welcome to INREP</h1>\n            <h4 style={{ color: \"#B7D5D4\" }}>A tool to help EMS providers reliably send reports to Hospitals without worrying about radio signal or cell service</h4>\n        </div>\n        <div>\n            <Row style={{ display: \"flex\", justifyContent: \"center\", color: \"white\", paddingBottom:\"3rem\"}}>\n                <h2>To begin, select what type of user you are:</h2>\n            </Row>\n            <Row>\n                <Col style={{ display: \"flex\", justifyContent: \"space-around\" }}>\n                    <a\n                        style={{ textAlign: \"center\", height: \"300px\", width: \"100%\", backgroundImage: `url(${ambulance})`, backgroundSize: \"contain\", backgroundRepeat: \"no-repeat\" }}\n                        href=\"/ems\"><span style={{ backgroundColor:\"rgb(119, 135, 139, 0.7)\",color: \"#FFD400\", fontSize: \"3rem\" }}>EMS PROVIDER</span></a>\n                    {/* {/* <Button href=\"/ems\">EMS Provider</Button>  \n                </Col>\n                <Col style={{ display: \"flex\", justifyContent: \"space-around\" }}>\n                    <a\n                        style={{  textAlign: \"center\", height: \"300px\", width: \"100%\", backgroundImage: `url(${hospital})`, backgroundSize: \"contain\", backgroundRepeat: \"no-repeat\" }}\n                        href=\"/hospital\"><span style={{ backgroundColor:\"rgb(119, 135, 139, 0.7)\",color: \"#FFD400\", fontSize: \"3rem\" }}>HOSPITAL</span></a>\n                    {/* // {/* <Button href=\"/hospital\">Hosipial</Button>  *\n                </Col>\n            </Row>\n        </div> */\n\n        // </div >\n    )\n}\n\nexport default Home\n\n{/* <Card >\n                <Card.Header><h2>To begin, select what type of user you are:</h2></Card.Header>\n                <Card.Body >\n                    <Card.Link\n                        className=\"btn btn-dark\"\n                        href=\"/ems\"\n                    >\n                        <h4>EMS Provider</h4>\n                    </Card.Link>\n                    <Card.Link\n                        className=\"btn btn-dark\"\n                        href=\"/hospital\"\n                    >\n                        <h4>Hospital</h4>\n                    </Card.Link>\n                    {/* <a\n                        className=\"btn btn-dark\"\n                        href=\"/ems\"\n                    ><h4>EMS Provider</h4></a>\n                    <a\n                        className=\"btn btn-dark\"\n                        href=\"/hospital\"\n                    ><h4>Hospital</h4>\n                    </a> \n                </Card.Body>\n            </Card> */}","/Users/allen/GitHub/casrep/client/src/pages/Hospital.js",[],"/Users/allen/GitHub/casrep/client/src/pages/EMS.js",[],"/Users/allen/GitHub/casrep/client/src/components/NewPatient/NewPatient.js",[],"/Users/allen/GitHub/casrep/client/src/components/PreviousPatients/PreviousPatients.js",[],["119","120"],"/Users/allen/GitHub/casrep/client/src/components/NewPatient/PtInitForm.js",["121"],"import React, { useState } from \"react\"\nimport API from \"../../utils/API\"\n// import Form from \"react-bootstrap/Form\"\n// import {Form} from \"@material-ui/core\"\nimport { useHistory } from \"react-router-dom\";\n\n\n// import Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\n// import Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button'\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\n// import { TextField } from \"@material-ui/core\";\n\nimport io from \"socket.io-client\"\nconst socket = io()\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& .MuiTextField-root': {\n            margin: \"0.5rem\",\n            width: '25ch',\n        },\n    },\n    inputContainer: {\n        // display:\"flex\",\n        // justifyItems:\"space-around\"\n        paddingBottom: \"2rem\",\n    },\n    form: {\n        backgroundColor: \"#E3E0DD\",\n        padding: \"1rem\",\n        color: \"black\",\n        borderRadius:\"5px\"\n    },\n    input: {\n        margin: \"0 0.5rem\",\n        // backgroundColor: \"white\",\n        borderRadius: \"4px\",\n    },\n    buttonDiv: {\n        justifyItems: \"center\"\n    }\n}));\n\nfunction PtInitForm(props) {\n    const classes = useStyles()\n\n    const [ptInit, setPtInit] = useState({\n        respondingUnit: \"\",\n        ETA: \"\",\n        // criticalWarn: \"\"\n    })\n    const history = useHistory()\n    // const [ptId, setPtId] = useState(\"\")\n\n    function handleInputChange(event) {\n        // console.log(event.target.name)\n        const { name, value } = event.target\n        setPtInit({ ...ptInit, [name]: value })\n    }\n\n    function handleReroute(id) {\n        history.push(\"/patients/\" + id)\n    }\n\n    function handleSubmit(event) {\n        event.preventDefault()\n        // console.log(ptInit)\n\n        // if (navigator.onLine){\n\n        API.createPatient(ptInit)\n            .then((data) => {\n                // console.log(data)\n                handleReroute(data.data._id)\n            })\n            .then(socket.emit(\"update\"))\n        // } else {console.log(\"offlineoffline\")}\n\n        // .then(API.findMostRecentPatient()\n        //     .then(setPtId()))\n        // .then(console.log(dbModel)))\n\n    }\n\n    return (\n        <Grid container justify=\"center\">\n            <form className={classes.root, classes.form} onSubmit={handleSubmit}>\n                <div className={classes.inputContainer}>\n                    <TextField\n                        className={classes.input}\n                        required\n                        variant=\"outlined\"\n                        label=\"Unit Responding\"\n                        placeholder=\"MS-21\"\n                        helperText=\"Required\"\n                        onChange={handleInputChange}\n                        type=\"text\"\n                        name=\"respondingUnit\"\n                    />\n                    <TextField\n                        className={classes.input}\n                        variant=\"outlined\"\n                        label=\"ETA\"\n                        helperText=\"Optional (Can update later)\"\n                        type=\"text\"\n                        name=\"ETA\"\n                        onChange={handleInputChange}\n                    />\n                </div>\n                <div className={classes.buttonDiv}>\n                    <Button size=\"large\" variant=\"contained\" color=\"primary\" onClick={handleSubmit}>Submit</Button>\n                </div>\n            </form>\n        </Grid>\n        // <Form onSubmit={handleSubmit}>\n        //     <Form.Group>\n        //         <Form.Label >Unit Responding</Form.Label>\n        //         <Form.Control\n        //             onChange={handleInputChange}\n        //             type=\"text\"\n        //             name=\"respondingUnit\"\n        //         />\n        //     </Form.Group>\n        //     {/* <Form.Group>\n        //         <Form.Label>ETA</Form.Label>\n        //         <Form.Control\n        //                 type=\"text\"\n        //                 name=\"ETA\"\n        //                 onChange={handleInputChange}\n        //             />\n        //     </Form.Group>\n        //     <Form.Group>\n        //         <Form.Label>Critical Warnings</Form.Label>\n        //         <Form.Control\n        //                 type=\"text\"\n        //                 name=\"criticalWarn\"\n        //                 onChange={handleInputChange} />\n        //     </Form.Group> */}\n        //     <Form.Control className=\"btn btn-primary\" type=\"submit\" value=\"Initiate Patient Report\"></Form.Control>\n        //     {/* <button \n        //     className=\"btn btn-warning\"\n        //     >\n        //         <h4>Open New Incident\n        //         </h4>\n        //     </button> */}\n        // </Form>\n    )\n}\n\nexport default PtInitForm","/Users/allen/GitHub/casrep/client/src/pages/CurrentPatient.js",["122","123","124","125"],"/Users/allen/GitHub/casrep/client/src/components/Vitals/VitalsForm.js",["126"],"import React, { useState } from \"react\"\n// import { Form, Button } from \"react-bootstrap\"\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid'\nimport Button from '@material-ui/core/Button'\nimport { Typography } from \"@material-ui/core\";\n\nimport { useParams } from \"react-router-dom\"\nimport API from \"../../utils/API\"\n\nimport io from \"socket.io-client\"\nconst socket = io()\n\nconst dayjs = require(\"dayjs\")\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& > *': {\n            margin: theme.spacing(1),\n            width: '25ch',\n        },\n    },\n    formgroup: {\n        display: \"inline\"\n    },\n    input: {\n        marginBottom: \"0.3rem\",\n        marginRight: \"0.3rem\",\n        backgroundColor: \"white\",\n        borderRadius: \"4px\"\n    },\n    submitButton: {\n        padding: \"8px 22px\",\n        fontSize: \"0.9375rem\",\n        minWidth: \"64px\",\n        backgroundColor: \"blue\",\n        // transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,border 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\n        /* font-family: \"Roboto\", \"Helvetica\", \"Arial\", sans-serif; */\n        /* font-weight: 500; */\n        lineHeight: \"1.75\",\n        borderRadius: \"4px\",\n    }\n}));\n\nconst blankVitals = {\n    time: \"\",\n    LOR: \"Not Reported\",\n    HR: \"Not Reported\",\n    RR: \"Not Reported\",\n    BPs: \"Not Reported\",\n    BPd: \"Not Reported\",\n    oxygen: \"Not Reported\",\n}\n\n// setVitals({ ...vitals, time: dayjs().format(\"HH:mm:ss\") })\n\n\n\nfunction VitalsForm(props) {\n    const classes = useStyles();\n    const { id } = useParams()\n\n    const [vitals, setVitals] = useState(blankVitals)\n\n    function handleVitalsInput(event) {\n        // console.log(vitals.LOR)\n        if (vitals.time === \"\") {\n            setVitals({ ...vitals, time: dayjs().format(\"HH:mm:ss\") })\n        } else {\n            const { name, value } = event.target;\n            setVitals({ ...vitals, [name]: value })\n        }\n    };\n\n    // function updateTime() {\n    // }\n\n    // function handleSubmit(event, data) {\n    //     // console.log(data)\n    //     props.onSubmit(event, data)\n    // }\n\n    function clearForm(target) {\n        let form\n        // let parent = \".parentElement\"\n        if (target.parentElement.nodeName === \"FORM\") {\n            form = target.parentElement\n        } else if (target.parentElement.parentElement.nodeName === \"FORM\") {\n            form = target.parentElement.parentElement\n        } else if (target.parentElement.parentElement.parentElement.nodeName === \"FORM\") {\n            form = target.parentElement.parentElement.parentElement\n        } else if (target.parentElement.parentElement.parentElement.parentElement.nodeName === \"FORM\") {\n            form = target.parentElement.parentElement.parentElement.parentElement\n        }\n        return form.reset()\n        // return form\n    }\n\n    function handleVitalsSubmit(event, data) {\n        // let form\n        event.preventDefault();\n        // if (event.target.parentElement.parentElement.parentElement === )\n        // console.log(event.target.parentElement.parentElement.nodeName)\n        // event.target.parentElement.parentElement.parentElement.reset()\n        // console.log(data)\n        if (data.HR !== \"Not Reported\") {\n            API.updateVitals(id, data)\n                .then(clearForm(event.target))\n                .then(socket.emit(\"update\"))\n                // .then(event.target.parentElement.parentElement.parentElement.reset())\n                // .then(console.log(event.target.parentElement.parentElement.parentElement))\n                .then(setVitals(blankVitals))\n            // .then(loadById(id))\n        }\n        // .exec(loadById(id))\n        // console.log(vitals)\n        // console.log(\"here\")\n    }\n\n    return (\n        <form className={classes.root} noValidate autoComplete=\"off\">\n            <Grid container className={classes.formgroup}>\n                <Grid item xs={12}>\n                    <TextField\n                        className={classes.input}\n                        id=\"outlined-basic\"\n                        label=\"LOR\"\n                        variant=\"outlined\"\n                        name=\"LOR\"\n                        onChange={handleVitalsInput} />\n                    <TextField\n                        className={classes.input}\n                        id=\"outlined-basic\"\n                        label=\"Oxygen Sat\"\n                        variant=\"outlined\"\n                        name=\"oxygen\"\n                        onChange={handleVitalsInput} />\n                </Grid>\n                <Grid item xs={12}>\n                    <TextField\n                        className={classes.input}\n                        id=\"outlined-basic\"\n                        label=\"Heart Rate\"\n                        variant=\"outlined\"\n                        name=\"HR\"\n                        onChange={handleVitalsInput} />\n                    <TextField\n                        className={classes.input}\n                        id=\"outlined-basic\"\n                        label=\"Repiratory Rate\"\n                        variant=\"outlined\"\n                        name=\"RR\"\n                        onChange={handleVitalsInput} />\n                </Grid>\n                <Grid item xs={12}>\n                    <TextField\n                        className={classes.input}\n                        id=\"outlined-basic\"\n                        label=\"BP systolic\"\n                        variant=\"outlined\"\n                        name=\"BPs\"\n                        onChange={handleVitalsInput} />\n                    <TextField\n                        className={classes.input}\n                        id=\"outlined-basic\"\n                        label=\"BP diastolic\"\n                        variant=\"outlined\"\n                        name=\"BPd\"\n                        onChange={handleVitalsInput} />\n\n                </Grid>\n                {/* <Typography className={classes.submitButton}>SUBMIT</Typography> */}\n                <Button size=\"large\" variant=\"contained\" color=\"primary\" onClick={(event) => handleVitalsSubmit(event, vitals)}>Submit</Button>\n            </Grid>\n        </form >\n    );\n    // return (\n    //     <Form onSubmit={props.onSubmit}>\n    //         <Form.Group>\n    //             <Form.Label>Heart Rate</Form.Label>\n    //             <Form.Control\n    //                 name=\"HR\"\n    //                 placeholder=\"Heart Rate\"\n    //                 type=\"number\"\n    //                 onChange={props.onChange}></Form.Control>\n    //         </Form.Group>\n    //         <Form.Group>\n    //             <Form.Label>Respiratory Rate</Form.Label>\n    //             <Form.Control\n    //                 name=\"RR\"\n    //                 placeholder=\"Respiratory Rate\"\n    //                 type=\"number\"\n    //                 onChange={props.onChange}></Form.Control>\n    //         </Form.Group>\n    //         <Form.Group>\n    //             <Form.Label>BP Systolic</Form.Label>\n    //             <Form.Control\n    //                 name=\"BPs\"\n    //                 placeholder=\"Systolic\"\n    //                 type=\"number\"\n    //                 onChange={props.onChange}></Form.Control>\n    //         </Form.Group>\n    //         <Form.Group>\n    //             <Form.Label>BP Diastolic</Form.Label>\n    //             <Form.Control\n    //                 name=\"BPd\"\n    //                 placeholder=\"Diastolic\"\n    //                 type=\"number\"\n    //                 onChange={props.onChange}></Form.Control>\n    //         </Form.Group>\n    //         <Form.Group>\n    //             <Form.Label>Oxygen Saturation</Form.Label>\n    //             <Form.Control\n    //                 name=\"oxygen\"\n    //                 placeholder=\"O2 sat\"\n    //                 type=\"number\"\n    //                 onChange={props.onChange}></Form.Control>\n    //         </Form.Group>\n    //         <Button \n    //         onClick={props.onSubmit}\n    //         variant=\"primary\" \n    //         type=\"submit\">\n    //             Submit\n    //         </Button>\n    //     </Form>\n    // )\n}\n\nexport default VitalsForm","/Users/allen/GitHub/casrep/client/src/components/PatientCard/PatientCard.js",["127","128","129","130","131","132","133","134","135"],"/Users/allen/GitHub/casrep/client/src/components/Vitals/VitalsTable.js",[],"/Users/allen/GitHub/casrep/client/src/components/CriticalWarning/CritWarnSelect.js",["136","137"],"import React, { useState } from \"react\"\n// import { Form, Card, Button } from \"react-bootstrap\"\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport FormGroup from '@material-ui/core/FormGroup'\nimport FormControl from '@material-ui/core/FormControl'\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Button from '@material-ui/core/Button'\nimport Grid from '@material-ui/core/Grid'\nimport { Form } from \"react-bootstrap\";\n\nimport { useParams } from \"react-router-dom\"\nimport API from \"../../utils/API\"\n\nimport io from \"socket.io-client\"\nconst socket = io()\n// import CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\n// import CheckBoxIcon from '@material-ui/icons/CheckBox';\n\nconst useStyles = makeStyles((theme) => ({\n    formgroup: {\n        display: \"block\"\n    },\n}));\n\nfunction CriticalWarnSelect(props) {\n    const classes = useStyles();\n    const { id } = useParams()\n\n    const [checked, setChecked] = useState({\n        CPR: false,\n        STROKE: false,\n        TRAUMA1: false,\n        TRAUMA2: false,\n        INTUBATED: false,\n        STEMI: false\n    })\n\n    // const allFalse = {\n    //     CPR: false,\n    //     stroke: false,\n    //     trauma1: false,\n    //     trauma2: false,\n    //     intubated: false,\n    //     fallWithThinners: false\n    // }\n\n    const handleChange = (event) => {\n        setChecked({ ...checked, [event.target.name]: event.target.checked });\n        // console.log(checked)\n    };\n\n    function handleCriticalsSubmit(event, data) {\n        event.preventDefault();\n        // findForm(event.target)\n        // console.log(event.target.parentElement.parentElement.parentElement)\n        // console.log(data)\n        // setCriticalWarning({ ...criticalWarnings, pending: false })\n        // // console.log(criticalWarnings)\n        // // const warningsString = JSON.stringify(criticalWarnings)\n        // // console.log(warningsString)\n\n        API.updateCriticalWarnings(id, data)\n            // .then(setCriticalWarning(data))\n            // .then(setCriticalWarning({...criticalWarnings}))\n            // .then(event.target.parentElement.parentElement.reset())\n            // .then(clearForm(event.target))\n            .then(socket.emit(\"update\"))\n        // .then(event.target.parentElement.parentElement.reset())\n        // .then(loadById(id))\n    }\n\n    // function clearCheckBoxes() {\n    //     setChecked(allFalse)\n    // }\n    return (\n        // <FormGroup row>\n        //     <Grid container className={classes.formgroup}>\n        //         <form>\n        //             <Grid item xs={12}>\n        <div className={classes.root}>\n            <FormControl component=\"fieldset\" className={classes.formControl}>\n                <FormGroup>\n                <FormControlLabel\n                            control={\n                                <Checkbox\n                                    checked={checked.CPR}\n                                    onChange={handleChange}\n                                    name=\"CPR\"\n                                    color=\"secondary\"\n                                />\n                            }\n                            label=\"CPR IN PROGRESS\"\n                        />\n                        <FormControlLabel\n                            control={\n                                <Checkbox\n                                    checked={checked.stroke}\n                                    onChange={handleChange}\n                                    name=\"STROKE\"\n                                    color=\"secondary\"\n                                />\n                            }\n                            label=\"STROKE ALERT\"\n                        />\n                        <FormControlLabel\n                            control={\n                                <Checkbox\n                                    checked={checked.trauma1}\n                                    onChange={handleChange}\n                                    name=\"TRAUMA1\"\n                                    color=\"secondary\"\n                                />\n                            }\n                            label=\"Trauma Level 1\"\n                        />\n                        <FormControlLabel\n                            control={\n                                <Checkbox\n                                    checked={checked.trauma2}\n                                    onChange={handleChange}\n                                    name=\"TRAUMA2\"\n                                    color=\"secondary\"\n                                />\n                            }\n                            label=\"Trauma Level 2\"\n                        />\n                        <FormControlLabel\n                            control={\n                                <Checkbox\n                                    checked={checked.intubated}\n                                    onChange={handleChange}\n                                    name=\"INTUBATED\"\n                                    color=\"secondary\"\n                                />\n                            }\n                            label=\"Patient Intubated\"\n                        />\n                        <FormControlLabel\n                            control={\n                                <Checkbox\n                                    checked={checked.STEMI}\n                                    onChange={handleChange}\n                                    name=\"STEMI\"\n                                    color=\"secondary\"\n                                />\n                            }\n                            label=\"STEMI ALERT\"\n                        />\n                    <Button size=\"large\" variant=\"contained\" color=\"primary\" onClick={(event) => handleCriticalsSubmit(event, checked)}>Submit</Button>\n                </FormGroup>\n            </FormControl>\n        </div>\n                        \n        //         </form>\n        //     </Grid>\n        // </FormGroup>\n    )\n    // return (\n    //     <FormGroup row>\n    //         <Grid container className={classes.formgroup}>\n    //             <form>\n    //                 <Grid item xs={12}>\n    //                     <FormControlLabel\n    //                         control={\n    //                             <Checkbox\n    //                                 checked={checked.CPR}\n    //                                 onChange={handleChange}\n    //                                 name=\"CPR\"\n    //                                 color=\"secondary\"\n    //                             />\n    //                         }\n    //                         label=\"CPR IN PROGRESS\"\n    //                     />\n    //                     <FormControlLabel\n    //                         control={\n    //                             <Checkbox\n    //                                 checked={checked.stroke}\n    //                                 onChange={handleChange}\n    //                                 name=\"stroke\"\n    //                                 color=\"secondary\"\n    //                             />\n    //                         }\n    //                         label=\"STROKE ALERT\"\n    //                     />\n    //                 </Grid>\n    //                 <Grid item xs={12}>\n    //                     <FormControlLabel\n    //                         control={\n    //                             <Checkbox\n    //                                 checked={checked.trauma1}\n    //                                 onChange={handleChange}\n    //                                 name=\"trauma1\"\n    //                                 color=\"secondary\"\n    //                             />\n    //                         }\n    //                         label=\"Trauma Level 1\"\n    //                     />\n    //                     <FormControlLabel\n    //                         control={\n    //                             <Checkbox\n    //                                 checked={checked.trauma2}\n    //                                 onChange={handleChange}\n    //                                 name=\"trauma2\"\n    //                                 color=\"secondary\"\n    //                             />\n    //                         }\n    //                         label=\"Trauma Level 2\"\n    //                     />\n    //                 </Grid>\n    //                 <Grid item xs={12}>\n    //                     <FormControlLabel\n    //                         control={\n    //                             <Checkbox\n    //                                 checked={checked.intubated}\n    //                                 onChange={handleChange}\n    //                                 name=\"intubated\"\n    //                                 color=\"secondary\"\n    //                             />\n    //                         }\n    //                         label=\"Patient Intubated\"\n    //                     />\n    //                     <FormControlLabel\n    //                         control={\n    //                             <Checkbox\n    //                                 checked={checked.fallWithThinners}\n    //                                 onChange={handleChange}\n    //                                 name=\"fallWithThinners\"\n    //                                 color=\"secondary\"\n    //                             />\n    //                         }\n    //                         label=\"Fall With Blood Thinners\"\n    //                     />\n    //                 </Grid>\n    //                 <Button size=\"large\" variant=\"contained\" color=\"primary\" onClick={(event) => handleSubmit(event, checked)}>Submit</Button>\n    //             </form>\n    //         </Grid>\n    //     </FormGroup>\n    // )\n}\n\nexport default CriticalWarnSelect","/Users/allen/GitHub/casrep/client/src/components/Navbar/Navbar.js",[],"/Users/allen/GitHub/casrep/client/src/components/EtaUpdate/EtaUpdate.js",["138"],"import React, {useState} from \"react\"\n// import { Form, Button } from \"react-bootstrap\"\n// import { useState } from \"react\"\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button'\n// import Grid from '@material-ui/core/Grid'\n\nimport { useParams } from \"react-router-dom\"\nimport API from \"../../utils/API\"\n\nimport io from \"socket.io-client\"\nconst socket = io()\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& > *': {\n            margin: theme.spacing(1),\n            width: '25ch',\n        },\n    },\n    formgroup: {\n        display: \"inline\"\n    },\n    input: {\n        marginBottom: \"0.3rem\",\n        marginRight: \"0.3rem\",\n        backgroundColor:\"white\",\n        borderRadius: \"4px\"\n    }\n}));\n\nfunction EtaUpdate(props) {\n    const classes = useStyles()\n    const { id } = useParams()\n\n    const [eta, setEta] = useState({\n        time: \"\"\n    })\n\n    function handleEtaInput(event) {\n        const { name, value } = event.target\n        setEta({ ...eta, [name]: value })\n        // console.log(eta.time)\n    }\n\n    function handleEtaSubmit(event, data) {\n        // console.log(data)\n        event.preventDefault()\n        // findForm(event.target)\n        // console.log(event.target.parentElement)\n\n        API.updateETA(id, { time: data.time })\n            .then(clearForm(event.target))\n            // .then(event.target.parentElement.reset())\n            .then(socket.emit(\"update\"))\n        // .then(setEta({ pending: false }))\n        // .then(loadById(id))\n    }\n\n    function clearForm(target) {\n        let form\n        // let parent = \".parentElement\"\n        if (target.parentElement.nodeName === \"FORM\") {\n            form = target.parentElement\n        } else if (target.parentElement.parentElement.nodeName === \"FORM\") {\n            form = target.parentElement.parentElement\n        } else if (target.parentElement.parentElement.parentElement.nodeName === \"FORM\") {\n            form = target.parentElement.parentElement.parentElement\n        } else if (target.parentElement.parentElement.parentElement.parentElement.nodeName === \"FORM\") {\n            form = target.parentElement.parentElement.parentElement.parentElement\n        }\n        return form.reset()\n        // return form\n    }\n    return (\n        <form className={classes.root, classes.form} onSubmit={props.etaSubmit}>\n                    <div className={classes.inputContainer}>\n                        <TextField\n                            className={classes.input}\n                            required\n                            variant=\"outlined\"\n                            label=\"ETA\"\n                            // placeholder=\"MS-21\"\n                            // helperText=\"Required\"\n                            onChange={handleEtaInput}\n                            type=\"text\"\n                            name=\"time\"\n                        />\n                    </div>\n                    <Button size=\"large\" variant=\"contained\" color=\"primary\" onClick={(event) => handleEtaSubmit(event, eta)}>Submit</Button>\n                </form>\n        // <Form\n        //     onSubmit={props.onSubmit}\n        // >\n        //     <Form.Group>\n        //         <Form.Label>What is you ETA?</Form.Label>\n        //         <Form.Control\n        //             name=\"time\"\n        //             placeholder=\"0000\"\n        //             // type=\"number\"\n        //             onChange={props.onChange}\n        //         />\n        //     </Form.Group>\n        //     <Button\n        //         onClick={props.onSubmit}\n        //         variant=\"primary\"\n        //         type=\"submit\">\n        //         Submit\n        //     </Button>\n        // </Form>\n    )\n}\n\nexport default EtaUpdate","/Users/allen/GitHub/casrep/client/src/components/PatientInformation/PatientInformationForm.js",[],"/Users/allen/GitHub/casrep/client/src/components/PatientInformation/PatientInformationTable.js",[],"/Users/allen/GitHub/casrep/client/src/components/HomeButtonBase/HomeButtonBase.js",[],"/Users/allen/GitHub/casrep/client/src/components/EMSToolbar/EMSToolbar.js",[],"/Users/allen/GitHub/casrep/client/src/components/EMSPatientCard/EMSPatientCard.js",["139","140"],"/Users/allen/GitHub/casrep/client/src/components/Loading/Loading.js",[],{"ruleId":"141","replacedBy":"142"},{"ruleId":"143","replacedBy":"144"},{"ruleId":"145","severity":1,"message":"146","line":47,"column":16,"nodeType":"147","endLine":48,"endColumn":8},{"ruleId":"141","replacedBy":"148"},{"ruleId":"143","replacedBy":"149"},{"ruleId":"150","severity":1,"message":"151","line":3,"column":1,"nodeType":"152","endLine":52,"endColumn":2},{"ruleId":"153","severity":1,"message":"154","line":100,"column":1,"nodeType":"155","messageId":"156","endLine":125,"endColumn":24},{"ruleId":"141","replacedBy":"157"},{"ruleId":"143","replacedBy":"158"},{"ruleId":"159","severity":1,"message":"160","line":90,"column":42,"nodeType":"161","messageId":"162","endLine":90,"endColumn":43},{"ruleId":"163","severity":1,"message":"164","line":20,"column":8,"nodeType":"165","messageId":"166","endLine":20,"endColumn":19},{"ruleId":"163","severity":1,"message":"167","line":27,"column":8,"nodeType":"165","messageId":"166","endLine":27,"endColumn":18},{"ruleId":"168","severity":1,"message":"169","line":109,"column":8,"nodeType":"170","endLine":109,"endColumn":10,"suggestions":"171"},{"ruleId":"163","severity":1,"message":"172","line":128,"column":14,"nodeType":"165","messageId":"166","endLine":128,"endColumn":23},{"ruleId":"163","severity":1,"message":"173","line":8,"column":10,"nodeType":"165","messageId":"166","endLine":8,"endColumn":20},{"ruleId":"163","severity":1,"message":"174","line":1,"column":17,"nodeType":"165","messageId":"166","endLine":1,"endColumn":25},{"ruleId":"163","severity":1,"message":"175","line":1,"column":27,"nodeType":"165","messageId":"166","endLine":1,"endColumn":36},{"ruleId":"163","severity":1,"message":"176","line":21,"column":10,"nodeType":"165","messageId":"166","endLine":21,"endColumn":19},{"ruleId":"163","severity":1,"message":"177","line":114,"column":11,"nodeType":"165","messageId":"166","endLine":114,"endColumn":21},{"ruleId":"163","severity":1,"message":"178","line":115,"column":11,"nodeType":"165","messageId":"166","endLine":115,"endColumn":23},{"ruleId":"163","severity":1,"message":"179","line":119,"column":9,"nodeType":"165","messageId":"166","endLine":119,"endColumn":16},{"ruleId":"163","severity":1,"message":"180","line":120,"column":9,"nodeType":"165","messageId":"166","endLine":120,"endColumn":18},{"ruleId":"181","severity":1,"message":"182","line":182,"column":64,"nodeType":"183","messageId":"184","endLine":182,"endColumn":66},{"ruleId":"181","severity":1,"message":"182","line":189,"column":66,"nodeType":"183","messageId":"184","endLine":189,"endColumn":68},{"ruleId":"163","severity":1,"message":"185","line":10,"column":8,"nodeType":"165","messageId":"166","endLine":10,"endColumn":12},{"ruleId":"163","severity":1,"message":"186","line":11,"column":10,"nodeType":"165","messageId":"166","endLine":11,"endColumn":14},{"ruleId":"159","severity":1,"message":"160","line":78,"column":38,"nodeType":"161","messageId":"162","endLine":78,"endColumn":39},{"ruleId":"181","severity":1,"message":"182","line":149,"column":64,"nodeType":"183","messageId":"184","endLine":149,"endColumn":66},{"ruleId":"181","severity":1,"message":"182","line":156,"column":66,"nodeType":"183","messageId":"184","endLine":156,"endColumn":68},"no-native-reassign",["187"],"no-negated-in-lhs",["188"],"react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","Literal",["187"],["188"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock",["187"],["188"],"no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","no-unused-vars","'PatientCard' is defined but never used.","Identifier","unusedVar","'EMSToolbar' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.","ArrayExpression",["189"],"'clearForm' is defined but never used.","'Typography' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'Component' is defined but never used.","'alertField' is assigned a value but never used.","'warningField' is assigned a value but never used.","'allKeys' is assigned a value but never used.","'alertKeys' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'Grid' is defined but never used.","'Form' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"190","fix":"191"},"Update the dependencies array to be: [id]",{"range":"192","text":"193"},[3319,3321],"[id]"]